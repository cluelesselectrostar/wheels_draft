
import 'package:flutter/material.dart';
import 'kmb_list_stops.dart';

import 'dart:async' show Future;
import 'package:flutter/services.dart' show rootBundle;
import 'dart:convert';

Future<String> _loadRouteAsset() async {
  return await rootBundle.loadString('ref/all_routes.json');
}

Future loadRouteList() async {
  String jsonString = await _loadRouteAsset();
  final jsonResponse = json.decode(jsonString);
  RouteFile routeFile = new RouteFile.fromJson(jsonResponse);
  print(routeFile.allRouteList.runtimeType);
}

class RouteFile {
  List<AllRoute> allRouteList;

  RouteFile({this.allRouteList});

  factory RouteFile.fromJson(Map<String, dynamic> json) {
    var list = json["routes"] as List;
    print(list.runtimeType);

    List<AllRoute> amendedList = list.map((i) =>
      AllRoute.fromJson(i)). toList();

    return new RouteFile(
      allRouteList: amendedList,
    );
  }
}

class AllRoute {
  String routeNo;
  String oriTC;
  String directionSym;
  String destTC;
  String remarksTC;
  String fareDollar;
  String tagSpecial;
  String operatorHK;
  String routeType;
  String lantauTag;

  AllRoute({this.routeNo,this.oriTC, this.directionSym, this.destTC, this.remarksTC, this.fareDollar, this.routeType, this.lantauTag, this.operatorHK, this.tagSpecial});

  AllRoute.fromJson(Map<String, dynamic> json) {
    routeNo = json["route_no"];
    oriTC = json["ori_tc"];
    directionSym = json["direction"];
    destTC = json["dest_tc"];
    remarksTC = json["remarks_tc"];
    fareDollar = json["fare"];
    tagSpecial = json["tag"];
    operatorHK = json["operator"];
    routeType = json["route_type"];
    lantauTag = json["lantau_tag"];
  }

}

class AllRouteIndex extends StatefulWidget {
  AllRouteIndex({Key key}) : super(key: key);

  @override
  _AllRouteIndexState createState() => _AllRouteIndexState();
}

class _AllRouteIndexState extends State<AllRouteIndex> {
  
  var routesforDisplay = List<Map<String, String>>();

  //List<Map<String,String>> duplicate = List.from(_routes);

  String _setImage(String operator, String lantauTag) {
    if (operator == "lwb") {
      return 'images/lwb.png';
    } else if (operator == "kmb") {
      return 'images/kmb.png';
    } else if (operator == "nwfb") {
      return 'images/nwfb.jpg';
    } else if (operator == "ctb") {
      return 'images/ctb.png';
    } else {
      return 'images/joint.png';
    }
  }

  Icon _setTagIcon(String tag, String lantauTag) {
    if (lantauTag == "airport") {
      return Icon(
        Icons.flight_takeoff,
      );
    } else if (tag == "peak") {
      return Icon(Icons.directions_run);
    } else if (tag == "special") {
      return Icon(Icons.priority_high);
    } else if (tag == "racecourse") {
      return Icon(Icons.monetization_on);
    } else if (tag == "night") {
      return Icon(
        Icons.brightness_2,
        color: Colors.deepPurple,
      );
    } else if (tag == "border") {
      return Icon(Icons.leak_remove);
    } else if (tag == "school") {
      return Icon(Icons.school);
    } else if (tag == "hst") {
      return Icon(Icons.train);
    }
    return null;
  }

  String _setSubtitle(String remarks) {
    if (remarks != null) {
      return remarks;
    }
    return "";
  }

  void _returnStops(String route, String serviceType, String bound, String operator) {
    if (operator == "kmb" || operator == "lwb") {
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => KMBListStops(
                route: route, serviceType: serviceType, bound: bound)),
      );
    } else if (operator == "ctb" || operator == "nwfb") {
      //TODO:
    } else {
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => KMBListStops(
                route: route, serviceType: serviceType, bound: bound)),
      );
    }
  }

  Column _availableDestinations(String type, String org, String dest, String direction, num serviceType, String route, String operator) {
    if (type == "one_way" || type == "circular") {
      return Column(children: [
        OutlineButton(
          child: Text(org + " " + direction + " " + dest),
          onPressed: () => _returnStops(route, "${serviceType}", "1", operator),
        ),
      ]);
    } else if (type == "bidirectional") {
      return Column(children: [
        OutlineButton(
          child: Text(org + " → " + dest),
          onPressed: () => _returnStops(route, "${serviceType}", "1", operator),
        ),
        OutlineButton(
          child: Text(dest + " → " + org),
          onPressed: () => _returnStops(route, "${serviceType}", "2", operator),
        ),
      ]);
    }
    return Column();
  }

  _listItem(index) {
    currentRoute = routesforDisplay[index]["route_no"];
    if (currentRoute == prevRoute) {
      serviceType += 1;
    } else {
      serviceType = 1;
    }
    prevRoute = currentRoute;
    return Card(
      child: ExpansionTile(
        leading: Container(
          width: 60,
          child: Column(
            children: [
              Image(
                image: new AssetImage(_setImage(
                    routesforDisplay[index]["operator"],
                    routesforDisplay[index]["lantau_tag"])),
                height: 25,
              ),
              Padding(
                padding: const EdgeInsets.only(top: 5.0),
                child: Text(routesforDisplay[index]["route_no"],
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    )),
              )
            ],
          ),
        ),
        title: Text(
          routesforDisplay[index]["ori_tc"] +
              " " +
              routesforDisplay[index]["direction"] +
              " " +
              routesforDisplay[index]["dest_tc"],
        ),
        subtitle: Text(_setSubtitle(routesforDisplay[index]["remarks_tc"]),
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey[600],
            )),
        children: <Widget>[
          Align(
              child: Column(children: [
            _availableDestinations(
                routesforDisplay[index]["route_type"],
                routesforDisplay[index]["ori_tc"],
                routesforDisplay[index]["dest_tc"],
                routesforDisplay[index]["direction"],
                serviceType,
                routesforDisplay[index]["route_no"],
                routesforDisplay[index]["operator"]),
            //Text("${serviceType}"),
          ])),
        ],
        trailing: _setTagIcon(routesforDisplay[index]["tag"],
            routesforDisplay[index]["lantau_tag"]),
      ),
    );
  }

  ///////////FOR SEARCH QUERIES//////////
  TextEditingController editingController = new TextEditingController();

  @override
  void initState() {
    routesforDisplay = _routes;
    super.initState();
  }

  _searchBar() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: TextField(
        controller: editingController,
        decoration: InputDecoration(
            labelText: "尋找路線",
            hintText: "尋找路線",
            prefixIcon: Icon(Icons.search),
            border: OutlineInputBorder(
                borderRadius: BorderRadius.all(Radius.circular(0.0)))),
        onChanged: (text) {
          /*
          text = text.toUpperCase();
          setState(() {
            routesforDisplay = _routes.where({ //TODO:
                var routeNumber = _route[index]["route_no"];
                return routeNumber.contains(text);
            }).toList();
          });
          */
        },
      ),
    );
  }

  /////////IDENTIFYING ROUTES WITH MULTIPLE serviceTypeS/////////
  String prevRoute;
  String currentRoute;
  num serviceType;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("所有路線"),
        backgroundColor: Colors.teal,
      ),
      body: ListView.builder(
        itemCount: routesforDisplay.length + 1,
        itemBuilder: (context, index) {
          return index == 0 ? _searchBar() : _listItem(index - 1);
        },
      ),
    );
  }
}
